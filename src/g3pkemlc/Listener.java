package g3pkemlc;

import java.io.BufferedWriter;
import java.io.FileWriter;

import java.util.List;
import java.util.Arrays;
import java.util.Comparator;

import net.sf.jclec.IFitness;
import net.sf.jclec.IConfigure;
import net.sf.jclec.IIndividual;
import net.sf.jclec.AlgorithmEvent;
import net.sf.jclec.IAlgorithmListener;

import net.sf.jclec.algorithm.PopulationAlgorithm;
import net.sf.jclec.fitness.SimpleValueFitness;
import net.sf.jclec.stringtree.StringTreeIndividual;
import net.sf.jclec.util.IndividualStatistics;

import org.apache.commons.configuration.Configuration;

import org.apache.commons.lang.builder.EqualsBuilder;

import g3pkemlc.utils.TreeUtils;
import g3pkemlc.utils.Utils;
import mulan.data.MultiLabelInstances;
import mulan.evaluation.Evaluation;
import mulan.evaluation.measure.Measure;

/**
 * Listener for G3P-kEMLC
 * 
 * @authors Jose M. Moyano
 * @author Sebastian Ventura
 */

public class Listener implements IAlgorithmListener, IConfigure 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */	
	private static final long serialVersionUID = -6866004037911080430L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
		
	/**
	 * Report frequency
	 */	
	private int reportFrequency;
	
	/**
	 * Utils
	 */
	Utils utils = new Utils();
	
	/**
	 * File with the number of leaves of the best individual in each generation
	 */
	String bestLeavesFilename = "reports/bestLeaves.csv";
	
	/**
	 * File with the fitness of the best individual in each generation
	 */
	String bestFilename = "reports/bestFitness.csv";
	
	/**
	 * File with the fitness of the median individual in each generation
	 */
	String medianFilename = "reports/medianFitness.csv";
	
	/**
	 * File with the average fitness of the population in each generation
	 */
	String avgFilename = "reports/avgFitness.csv";
	
	/**
	 * File with the fitness of the worst individual in each generation
	 */
	String worstFilename = "reports/worstFitness.csv";
	
	/**
	 * File with the crossover probability in each generation
	 */
	String pcFilename = "reports/crossProbability.csv";
	
	/**
	 * File with the crossover probability in each generation
	 */
	String pmFilename = "reports/mutProbability.csv";
	
	/**
	 * File with the best tree at the end of the execution
	 */
	String bestTreeFilename = "reports/bestTree.csv";
	
	/**
	 * File with the classification report over the test set (best individual)
	 */
	String classificationReportFilename = "reports/testResults.csv";
	
	/**
	 * Start time of the algorithm
	 */
	private long time_start;

	/**
	 * Constructor
	 */
	public Listener() 
	{
		super();
	}

	/**
	 * Getter for report frequency
	 * @return report frequency
	 */
	public final int getReportFrequency() 
	{
		return reportFrequency;
	}

	/**
	 * Setter for report frequency
	 * @param reportFrequency report frequency
	 */
	public final void setReportFrequency(int reportFrequency) 
	{
		this.reportFrequency = reportFrequency;
	}
	// IConfigure interface
	
	@Override
	public void configure(Configuration settings) 
	{
		//Get start time
		time_start = System.currentTimeMillis();

		// Set report frequency (default 10 generations)
		int reportFrequency = settings.getInt("report-frequency", 10); 
		setReportFrequency(reportFrequency);
	}

	@Override
	public void algorithmStarted(AlgorithmEvent event) 
	{		
		// Do an iteration report
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), true);
	}

	@Override
	public void iterationCompleted(AlgorithmEvent event)
	{
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), false);
	}

	@Override
	public void algorithmFinished(AlgorithmEvent event) 
	{
		long time = System.currentTimeMillis() - time_start;
		
		// Do last generation report
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), true);
		
		BufferedWriter bestLeavesWriter = null;
		BufferedWriter bestTreeWriter = null;
		BufferedWriter bestWriter = null;
		BufferedWriter medianWriter = null;
		BufferedWriter avgWriter = null;
		BufferedWriter worstWriter = null;
		BufferedWriter pcWriter = null;
		BufferedWriter pmWriter = null;
		BufferedWriter classificationReportWriter = null;
		
		try {
			bestLeavesWriter = new BufferedWriter(new FileWriter(bestLeavesFilename, true));
			bestLeavesWriter.write("\n");
			bestLeavesWriter.close();
			
			// Fitness comparator, inhabitants, and best individual
			Comparator<IFitness> comparator = ((PopulationAlgorithm) event.getAlgorithm()).getEvaluator().getComparator();
			List<IIndividual> inhabitants = ((PopulationAlgorithm) event.getAlgorithm()).getInhabitants();
			IIndividual best = IndividualStatistics.bestIndividual(inhabitants, comparator);
			String bestGen = ((StringTreeIndividual)best).getGenotype();
			bestTreeWriter = new BufferedWriter(new FileWriter(bestTreeFilename, true));
			int [] votesPerLabel = TreeUtils.votesPerLabel(bestGen, ((Alg)event.getAlgorithm()).klabelsets, ((Alg)event.getAlgorithm()).fullTrainData.getNumLabels());
			double avgVotes = TreeUtils.avgVotes(votesPerLabel);
			bestTreeWriter.write(bestGen + " " + Arrays.toString(votesPerLabel) + "; " + avgVotes + "; " + utils.getLeaves(bestGen).size() + ";\n");
			bestTreeWriter.close();
			
			bestWriter = new BufferedWriter(new FileWriter(bestFilename, true));
			bestWriter.write("\n");
			bestWriter.close();
			
			medianWriter = new BufferedWriter(new FileWriter(medianFilename, true));
			medianWriter.write("\n");
			medianWriter.close();
			
			avgWriter = new BufferedWriter(new FileWriter(avgFilename, true));
			avgWriter.write("\n");
			avgWriter.close();
			
			worstWriter = new BufferedWriter(new FileWriter(worstFilename, true));
			worstWriter.write("\n");
			worstWriter.close();
			
			pcWriter = new BufferedWriter(new FileWriter(pcFilename, true));
			pcWriter.write("\n");
			pcWriter.close();
			
			pmWriter = new BufferedWriter(new FileWriter(pmFilename, true));
			pmWriter.write("\n");
			pmWriter.close();
		} catch(Exception e) {
			e.printStackTrace();
			System.exit(-1);
		}
		
		EMLC ensemble = ((Alg)event.getAlgorithm()).getEnsemble();
		MultiLabelInstances testData = ((Alg)event.getAlgorithm()).getTestData();
		List<Measure> measures = utils.prepareMeasures(testData);
		Evaluation results;
		try {
			results = new Evaluation(measures, testData);
			mulan.evaluation.Evaluator eval = new mulan.evaluation.Evaluator();
			
			ensemble.resetSeed(((Alg)event.getAlgorithm()).getSeed());
			results = eval.evaluate(ensemble, testData, measures);
			
			//If the file didnt exist, print the header
			boolean printHeader = false;
			if(!utils.fileExist(classificationReportFilename)) {
				printHeader = true;
			}
			
			classificationReportWriter = new BufferedWriter(new FileWriter(classificationReportFilename, true));
			if(printHeader) {
				classificationReportWriter.write(" ; ");
				for(int i=0; i<results.getMeasures().size(); i++) {
					classificationReportWriter.write(results.getMeasures().get(i).getName() + "; ");
				}
				classificationReportWriter.write("time(ms); iters; \n");
			}
			
			classificationReportWriter.write(testData.getDataSet().relationName() + "_" + ((Alg)event.getAlgorithm()).getSeed() + "; " + results.toCSV().replace(",", ".") + time + "; " + ((Alg)event.getAlgorithm()).getGeneration() + ";\n");
			classificationReportWriter.close();
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		
		((Alg)event.getAlgorithm()).clear();
	}

	@Override
	public void algorithmTerminated(AlgorithmEvent e) {
		
	}

	@Override
	public boolean equals(Object other)
	{
		if (other instanceof Listener) {
			Listener cother = (Listener) other;
			EqualsBuilder eb = new EqualsBuilder();
			// reportFrequency
			eb.append(reportFrequency, cother.reportFrequency);
			
			return eb.isEquals();
		}
		else {
			return false;
		}
	}

	protected void doIterationReport(PopulationAlgorithm algorithm, boolean force)
	{
		// Fitness comparator
		Comparator<IFitness> comparator = algorithm.getEvaluator().getComparator();
		// Population individuals
		List<IIndividual> inhabitants = algorithm.getInhabitants();
		// Actual generation
		int generation = algorithm.getGeneration();
		
		// Check if this is correct generation
		if (!force && generation%reportFrequency != 0) {
			return;
		}			
		
		// Do population report
		StringBuffer sb = new StringBuffer("Generation " + generation + " Report\n");
		// Best individual
		IIndividual best = IndividualStatistics.bestIndividual(inhabitants, comparator);		
		sb.append("Best individual: "+best+ ((SimpleValueFitness)best.getFitness()).getValue() +"\n");
		// Worst individual
		IIndividual worst = IndividualStatistics.worstIndividual(inhabitants, comparator);
		sb.append("Worst individual: "+worst+ ((SimpleValueFitness)worst.getFitness()).getValue() + "\n");
		// Median individual
		IIndividual median = IndividualStatistics.medianIndividual(inhabitants, comparator);
		sb.append("Median individual: "+median+  ((SimpleValueFitness)median.getFitness()).getValue() + "\n");		
		// Average fitness and fitness variance
		double [] avgvar = IndividualStatistics.averageFitnessAndFitnessVariance(inhabitants);
		sb.append("Average fitness = " + avgvar[0]+"\n");
		sb.append("Fitness variance = "+ avgvar[1]+"\n");
		
		BufferedWriter bestLeavesWriter = null;
		BufferedWriter bestWriter = null;
		BufferedWriter medianWriter = null;
		BufferedWriter avgWriter = null;
		BufferedWriter worstWriter = null;
		BufferedWriter pcWriter = null;
		BufferedWriter pmWriter = null;
		
		try {
			bestLeavesWriter = new BufferedWriter(new FileWriter(bestLeavesFilename, true));
			bestLeavesWriter.write(utils.countLeaves(((StringTreeIndividual)best).getGenotype()) + "; ");
			bestLeavesWriter.close();
			
			bestWriter = new BufferedWriter(new FileWriter(bestFilename, true));
			bestWriter.write(((SimpleValueFitness)best.getFitness()).getValue() + "; ");
			bestWriter.close();
			
			medianWriter = new BufferedWriter(new FileWriter(medianFilename, true));
			medianWriter.write(((SimpleValueFitness)median.getFitness()).getValue() + "; ");
			medianWriter.close();
			
			avgWriter = new BufferedWriter(new FileWriter(avgFilename, true));
			avgWriter.write(avgvar[0] + "; ");
			avgWriter.close();
			
			worstWriter = new BufferedWriter(new FileWriter(worstFilename, true));
			worstWriter.write(((SimpleValueFitness)worst.getFitness()).getValue() + "; ");
			worstWriter.close();
			
			pcWriter = new BufferedWriter(new FileWriter(pcFilename, true));
			pcWriter.write(((Alg)algorithm).getRecombinationProb() + "; ");
			pcWriter.close();
			
			pmWriter = new BufferedWriter(new FileWriter(pmFilename, true));
			pmWriter.write(((Alg)algorithm).getMutationProb() + "; ");
			pmWriter.close();
		} catch(Exception e) {
			e.printStackTrace();
			System.exit(-1);
		}
	}
}
